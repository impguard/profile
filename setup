#!/usr/bin/env bash
# shellcheck disable=SC2154

DOC="Profile setup tool.

Usage:
  ./profile.sh install [PROFILES...]
  ./profile.sh (home|pre|init|post) [PROFILES...]
  ./profile.sh SCRIPT_PATH
  ./profile.sh (ls|info)

Commands:
  install   Installs all listed profiles
  home      Copies home files for the selected profiles
  pre       Performs pre-initialization for the selected profiles
  init      Performs initialization for the selected profiles
  post      Performs post-initialization for the selected profiles
  ls        List all available profiles and installation scripts
  info      Shows information about current system
"
# docopt parser below, refresh this parser with `docopt.sh setup`
# shellcheck disable=2016,1075,2154
docopt() { parse() { if ${DOCOPT_DOC_CHECK:-true}; then local doc_hash
if doc_hash=$(printf "%s" "$DOC" | (sha256sum 2>/dev/null || shasum -a 256)); then
if [[ ${doc_hash:0:5} != "$digest" ]]; then
stderr "The current usage doc (${doc_hash:0:5}) does not match \
what the parser was generated with (${digest})
Run \`docopt.sh\` to refresh the parser."; _return 70; fi; fi; fi
local root_idx=$1; shift; argv=("$@"); parsed_params=(); parsed_values=()
left=(); testdepth=0; local arg; while [[ ${#argv[@]} -gt 0 ]]; do
if [[ ${argv[0]} = "--" ]]; then for arg in "${argv[@]}"; do
parsed_params+=('a'); parsed_values+=("$arg"); done; break
elif [[ ${argv[0]} = --* ]]; then parse_long
elif [[ ${argv[0]} = -* && ${argv[0]} != "-" ]]; then parse_shorts
elif ${DOCOPT_OPTIONS_FIRST:-false}; then for arg in "${argv[@]}"; do
parsed_params+=('a'); parsed_values+=("$arg"); done; break; else
parsed_params+=('a'); parsed_values+=("${argv[0]}"); argv=("${argv[@]:1}"); fi
done; local idx; if ${DOCOPT_ADD_HELP:-true}; then
for idx in "${parsed_params[@]}"; do [[ $idx = 'a' ]] && continue
if [[ ${shorts[$idx]} = "-h" || ${longs[$idx]} = "--help" ]]; then
stdout "$trimmed_doc"; _return 0; fi; done; fi
if [[ ${DOCOPT_PROGRAM_VERSION:-false} != 'false' ]]; then
for idx in "${parsed_params[@]}"; do [[ $idx = 'a' ]] && continue
if [[ ${longs[$idx]} = "--version" ]]; then stdout "$DOCOPT_PROGRAM_VERSION"
_return 0; fi; done; fi; local i=0; while [[ $i -lt ${#parsed_params[@]} ]]; do
left+=("$i"); ((i++)) || true; done
if ! required "$root_idx" || [ ${#left[@]} -gt 0 ]; then error; fi; return 0; }
parse_shorts() { local token=${argv[0]}; local value; argv=("${argv[@]:1}")
[[ $token = -* && $token != --* ]] || _return 88; local remaining=${token#-}
while [[ -n $remaining ]]; do local short="-${remaining:0:1}"
remaining="${remaining:1}"; local i=0; local similar=(); local match=false
for o in "${shorts[@]}"; do if [[ $o = "$short" ]]; then similar+=("$short")
[[ $match = false ]] && match=$i; fi; ((i++)) || true; done
if [[ ${#similar[@]} -gt 1 ]]; then
error "${short} is specified ambiguously ${#similar[@]} times"
elif [[ ${#similar[@]} -lt 1 ]]; then match=${#shorts[@]}; value=true
shorts+=("$short"); longs+=(''); argcounts+=(0); else value=false
if [[ ${argcounts[$match]} -ne 0 ]]; then if [[ $remaining = '' ]]; then
if [[ ${#argv[@]} -eq 0 || ${argv[0]} = '--' ]]; then
error "${short} requires argument"; fi; value=${argv[0]}; argv=("${argv[@]:1}")
else value=$remaining; remaining=''; fi; fi; if [[ $value = false ]]; then
value=true; fi; fi; parsed_params+=("$match"); parsed_values+=("$value"); done
}; parse_long() { local token=${argv[0]}; local long=${token%%=*}
local value=${token#*=}; local argcount; argv=("${argv[@]:1}")
[[ $token = --* ]] || _return 88; if [[ $token = *=* ]]; then eq='='; else eq=''
value=false; fi; local i=0; local similar=(); local match=false
for o in "${longs[@]}"; do if [[ $o = "$long" ]]; then similar+=("$long")
[[ $match = false ]] && match=$i; fi; ((i++)) || true; done
if [[ $match = false ]]; then i=0; for o in "${longs[@]}"; do
if [[ $o = $long* ]]; then similar+=("$long"); [[ $match = false ]] && match=$i
fi; ((i++)) || true; done; fi; if [[ ${#similar[@]} -gt 1 ]]; then
error "${long} is not a unique prefix: ${similar[*]}?"
elif [[ ${#similar[@]} -lt 1 ]]; then
[[ $eq = '=' ]] && argcount=1 || argcount=0; match=${#shorts[@]}
[[ $argcount -eq 0 ]] && value=true; shorts+=(''); longs+=("$long")
argcounts+=("$argcount"); else if [[ ${argcounts[$match]} -eq 0 ]]; then
if [[ $value != false ]]; then
error "${longs[$match]} must not have an argument"; fi
elif [[ $value = false ]]; then
if [[ ${#argv[@]} -eq 0 || ${argv[0]} = '--' ]]; then
error "${long} requires argument"; fi; value=${argv[0]}; argv=("${argv[@]:1}")
fi; if [[ $value = false ]]; then value=true; fi; fi; parsed_params+=("$match")
parsed_values+=("$value"); }; required() { local initial_left=("${left[@]}")
local node_idx; ((testdepth++)) || true; for node_idx in "$@"; do
if ! "node_$node_idx"; then left=("${initial_left[@]}"); ((testdepth--)) || true
return 1; fi; done; if [[ $((--testdepth)) -eq 0 ]]; then
left=("${initial_left[@]}"); for node_idx in "$@"; do "node_$node_idx"; done; fi
return 0; }; either() { local initial_left=("${left[@]}"); local best_match_idx
local match_count; local node_idx; ((testdepth++)) || true
for node_idx in "$@"; do if "node_$node_idx"; then
if [[ -z $match_count || ${#left[@]} -lt $match_count ]]; then
best_match_idx=$node_idx; match_count=${#left[@]}; fi; fi
left=("${initial_left[@]}"); done; ((testdepth--)) || true
if [[ -n $best_match_idx ]]; then "node_$best_match_idx"; return 0; fi
left=("${initial_left[@]}"); return 1; }; oneormore() { local i=0
local prev=${#left[@]}; while "node_$1"; do ((i++)) || true
[[ $prev -eq ${#left[@]} ]] && break; prev=${#left[@]}; done
if [[ $i -ge 1 ]]; then return 0; fi; return 1; }; _command() { local i
local name=${2:-$1}; for i in "${!left[@]}"; do local l=${left[$i]}
if [[ ${parsed_params[$l]} = 'a' ]]; then
if [[ ${parsed_values[$l]} != "$name" ]]; then return 1; fi
left=("${left[@]:0:$i}" "${left[@]:((i+1))}")
[[ $testdepth -gt 0 ]] && return 0; if [[ $3 = true ]]; then
eval "((var_$1++)) || true"; else eval "var_$1=true"; fi; return 0; fi; done
return 1; }; value() { local i; for i in "${!left[@]}"; do local l=${left[$i]}
if [[ ${parsed_params[$l]} = "$2" ]]; then
left=("${left[@]:0:$i}" "${left[@]:((i+1))}")
[[ $testdepth -gt 0 ]] && return 0; local value
value=$(printf -- "%q" "${parsed_values[$l]}"); if [[ $3 = true ]]; then
eval "var_$1+=($value)"; else eval "var_$1=$value"; fi; return 0; fi; done
return 1; }; stdout() { printf -- "cat <<'EOM'\n%s\nEOM\n" "$1"; }; stderr() {
printf -- "cat <<'EOM' >&2\n%s\nEOM\n" "$1"; }; error() {
[[ -n $1 ]] && stderr "$1"; stderr "$usage"; _return 1; }; _return() {
printf -- "exit %d\n" "$1"; exit "$1"; }; set -e; trimmed_doc=${DOC:0:581}
usage=${DOC:21:141}; digest=ed212; shorts=(); longs=(); argcounts=(); node_0(){
value PROFILES a true; }; node_1(){ value SCRIPT_PATH a; }; node_2(){
_command install; }; node_3(){ _command home; }; node_4(){ _command pre; }
node_5(){ _command init; }; node_6(){ _command post; }; node_7(){ _command ls; }
node_8(){ _command info; }; node_9(){ oneormore 0; }; node_10(){ required 2 9; }
node_11(){ either 3 4 5 6; }; node_12(){ required 11; }; node_13(){
required 12 9; }; node_14(){ required 1; }; node_15(){ either 7 8; }; node_16(){
required 15; }; node_17(){ required 16; }; node_18(){ either 10 13 14 17; }
node_19(){ required 18; }; cat <<<' docopt_exit() {
[[ -n $1 ]] && printf "%s\n" "$1" >&2; printf "%s\n" "${DOC:21:141}" >&2; exit 1
}'; unset var_PROFILES var_SCRIPT_PATH var_install var_home var_pre var_init \
var_post var_ls var_info; parse 19 "$@"; local prefix=${DOCOPT_PREFIX:-''}
unset "${prefix}PROFILES" "${prefix}SCRIPT_PATH" "${prefix}install" \
"${prefix}home" "${prefix}pre" "${prefix}init" "${prefix}post" "${prefix}ls" \
"${prefix}info"; if declare -p var_PROFILES >/dev/null 2>&1; then
eval "${prefix}"'PROFILES=("${var_PROFILES[@]}")'; else
eval "${prefix}"'PROFILES=()'; fi
eval "${prefix}"'SCRIPT_PATH=${var_SCRIPT_PATH:-}'
eval "${prefix}"'install=${var_install:-false}'
eval "${prefix}"'home=${var_home:-false}'
eval "${prefix}"'pre=${var_pre:-false}'
eval "${prefix}"'init=${var_init:-false}'
eval "${prefix}"'post=${var_post:-false}'; eval "${prefix}"'ls=${var_ls:-false}'
eval "${prefix}"'info=${var_info:-false}'; local docopt_i=1
[[ $BASH_VERSION =~ ^4.3 ]] && docopt_i=2; for ((;docopt_i>0;docopt_i--)); do
declare -p "${prefix}PROFILES" "${prefix}SCRIPT_PATH" "${prefix}install" \
"${prefix}home" "${prefix}pre" "${prefix}init" "${prefix}post" "${prefix}ls" \
"${prefix}info"; done; }
# docopt parser above, complete command for generating this parser is `docopt.sh setup`

eval "$(docopt "$@")"

set -euo pipefail
shopt -s nullglob

ROOT=$HOME/.profile.d
PROFILE_DIR=$ROOT/profile
STAGING_DIR=$ROOT/staging
INSTALL_DIR=$ROOT/staging/install

########################################
# Helpers
########################################

RED='\033[0;31m'
GREEN='\033[0;32m'
CLEAR='\033[0m'

function log
{
  local message=$1
  echo -e "$GREEN$message$CLEAR"
}

function logerror
{
  local message=$1
  echo -e "$RED$message$CLEAR"
}

function pushd
{
  command pushd "$@" > /dev/null
}

function popd
{
  command popd > /dev/null
}

function stage
{
  for profile in "${PROFILES[@]}"; do
    cp -vfrs "$PROFILE_DIR/$profile/." "$STAGING_DIR"
  done
}

function verify_profiles
{
  for profile in "${PROFILES[@]}"; do
    if [ ! -d "$PROFILE_DIR/$profile" ]; then
      logerror "$profile is not a supported profile"
      return 1
    fi
  done
}

function run_script
{
  local type script script_name workspace

  type=$1
  script=$2

  if [ ! -f "$script" ]; then
    logerror "Not a valid script to run $script"
    return
  fi

  script_name=$(basename "$script")
  workspace=$INSTALL_DIR/$type/$script_name

  rm -rf "$workspace"
  mkdir -p "$workspace"
  pushd "$workspace"
  log "Running script $script_name"
  $script || logerror "Install failed. Workspace at $workspace"
  popd
}

########################################
# Commands
########################################

function install
{
  home
  pre
  init
  post
}

function home
{
  log "Linking home files"
  cp -a "$STAGING_DIR/home/." "$HOME/"
}

function pre
{
  log "Running pre initialization"
  for script in "$STAGING_DIR/pre"/*; do
    run_script pre "$script"
  done
}

function init
{
  log "Running initialization"
  for script in "$STAGING_DIR/init"/*; do
    run_script init "$script"
  done
}

function post
{
  log "Running post initialization"
  for script in "$STAGING_DIR/post"/*; do
    run_script post "$script"
  done
}

if $install; then
  verify_profiles
  stage
  install
elif $home; then
  verify_profiles
  stage
  home
elif $pre; then
  verify_profiles
  stage
  pre
elif $post; then
  verify_profiles
  stage
  post
elif $script; then
  run_script manual "$SCRIPT_PATH"
elif $ls; then
  for profile_path in $PROFILE_DIR; do
    profile=$(basename "$profile_path")
    echo "Profile      : $profile"
    # shellcheck disable=2012
    echo "Pre Scripts  : $(ls "$profile_path/pre" 2>/dev/null | tr "\n" " ")"
    # shellcheck disable=2012
    echo "Init Scripts : $(ls "$profile_path/init" 2>/dev/null | tr "\n" " ")"
    # shellcheck disable=2012
    echo "Post Scripts : $(ls "$profile_path/post" 2>/dev/null | tr "\n" " ")"
    echo
  done
elif $info; then
  echo "This lists your platform information, which may inform what you want to install."
  uname
fi
